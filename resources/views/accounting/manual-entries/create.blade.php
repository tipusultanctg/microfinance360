@extends('layouts.master')

@section('content')
    <div class="card">
        <div class="card-body">
            <h6 class="card-title">Create Manual Journal Entry</h6>

            @if ($errors->any())
                <div class="alert alert-danger">
                    <ul>
                        @foreach ($errors->all() as $error)
                            <li>{{ $error }}</li>
                        @endforeach
                    </ul>
                </div>
            @endif

            <form method="POST" action="{{ route('accounting.manual-entries.store') }}">
                @csrf
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <label for="date" class="form-label">Date</label>
                        <input type="date" name="date" class="form-control" value="{{ now()->format('Y-m-d') }}" required>
                    </div>
                    <div class="col-md-8 mb-3">
                        <label for="description" class="form-label">Description / Memo</label>
                        <input type="text" name="description" class="form-control" placeholder="e.g., Owner equity injection, Office rent for May" required>
                    </div>
                </div>

                <hr>
                <h6 class="mt-4">Ledger Entries</h6>
                <div id="entry-container">
                    {{-- Initial two rows will be generated by JS --}}
                </div>

                <button type="button" id="add-entry-btn" class="btn btn-secondary btn-sm mt-2">Add Another Line</button>
                <hr>
                <div class="d-flex justify-content-end align-items-center">
                    <div class="me-4">
                        <strong>Total Debits: <span id="total-debits">$0.00</span></strong>
                    </div>
                    <div class="me-4">
                        <strong>Total Credits: <span id="total-credits">$0.00</span></strong>
                    </div>
                    <button type="submit" class="btn btn-primary">Post Entry</button>
                </div>
            </form>
        </div>
    </div>

@endsection


@push('custom-scripts')
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const container = document.getElementById('entry-container');
            const addBtn = document.getElementById('add-entry-btn');
            const totalDebitsEl = document.getElementById('total-debits');
            const totalCreditsEl = document.getElementById('total-credits');
            let entryIndex = 0;

            const accounts = @json($accounts->map(fn($acc) => ['id' => $acc->id, 'name' => $acc->name]));

            function createEntryRow() {
                const row = document.createElement('div');
                row.classList.add('row', 'mb-2', 'entry-row');
                row.innerHTML = `
            <div class="col-md-5">
                <select name="entries[${entryIndex}][account_id]" class="form-select" required>
                    <option value="">Select Account...</option>
                    ${accounts.map(acc => `<option value="${acc.id}">${acc.name}</option>`).join('')}
                </select>
            </div>
            <div class="col-md-3">
                <select name="entries[${entryIndex}][type]" class="form-select entry-type" required>
                    <option value="debit">Debit</option>
                    <option value="credit">Credit</option>
                </select>
            </div>
            <div class="col-md-3">
                <input type="number" step="0.01" name="entries[${entryIndex}][amount]" class="form-control entry-amount" placeholder="Amount" required>
            </div>
            <div class="col-md-1 d-flex align-items-center">
                <button type="button" class="btn btn-danger btn-sm remove-entry-btn">X</button>
            </div>
        `;
                container.appendChild(row);
                entryIndex++;
            }

            function calculateTotals() {
                let totalDebits = 0;
                let totalCredits = 0;
                document.querySelectorAll('.entry-row').forEach(row => {
                    const type = row.querySelector('.entry-type').value;
                    const amount = parseFloat(row.querySelector('.entry-amount').value) || 0;
                    if (type === 'debit') {
                        totalDebits += amount;
                    } else {
                        totalCredits += amount;
                    }
                });
                totalDebitsEl.textContent = '$' + totalDebits.toFixed(2);
                totalCreditsEl.textContent = '$' + totalCredits.toFixed(2);
            }

            addBtn.addEventListener('click', createEntryRow);
            container.addEventListener('click', function (e) {
                if (e.target.classList.contains('remove-entry-btn')) {
                    e.target.closest('.entry-row').remove();
                    calculateTotals();
                }
            });
            container.addEventListener('input', calculateTotals);

            // Create initial rows
            createEntryRow();
            createEntryRow();
        });
    </script>
@endpush
